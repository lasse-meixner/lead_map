---
title: "BLL poisson regression demonstration"
format:
    html:
      code-fold: true
---

# Introduction

This notebook implements a [poisson regression](https://github.com/fditraglia/learn-bayes/blob/main/censored-data-STAN.qmd) example with censored data by running a toy model on data from Massachusetts.

Massachusetts offers itself for this purpose since it does NOT suppress tests, and has a 50% suppression rate.

Since the different tracts have different populations of kids, this will be featured as an offset in the conditional expectation function, as in the example in this other [notebook from learn-bayes](https://github.com/fditraglia/learn-bayes/blob/main/poisson-regression-STAN.qmd).

# Loading the data

```{r}
library(tidyverse)
source("find_and_set_directory.R")
```

## Loading Lead Data

```{r}
find_and_set_directory("source files")
source("../00_merging_functions.R")
load_state("MA")
ma <- ma |> filter(year == 2010)
```

## Loading US predictors

```{r}
# load combined_tract.csv from US/predictors/processed_data (otherwise get it from GDrive!)
find_and_set_directory("US/predictors/processed_data")
ma_predictors <- read_csv("combined_tract.csv") |>
  filter(grepl("Massachusetts", NAME)) # NAME contains Massachusetts
```

## Massachusetts

I will first run a toy example with just a single X, and then with a selection of multiple features:

```{r}
info_vars <- c("TRACT","STATE_NAME","COUNTY") 
offset_var <- c("under_yo5_pplE")
features <- c("median_annual_incomeE","house_price_medianE","poor_fam_propE","black_ppl_propE", "bp_pre_1959E_prop", "svi_socioeconomic_pctile")

x_ma <- ma_predictors |> select(all_of(c(features, offset_var, info_vars))) |>
  # remove any potential duplicate rows from prev. joins
    distinct()
```

```{r}
# Merging lead and predictor data at the tract level
data <- ma |> 
  rename(TRACT = tract) |> 
  mutate(TRACT = as.character(TRACT)) |> 
  left_join(x_ma, by = "TRACT") |> 
  mutate(censored = ifelse(str_detect(BLL_geq_5, "<"), TRUE, FALSE))
  
```

Concerning the outcome, I am ignoring the fact that the count is upper bounded by the nr of tested. In Massachusetts, this isn't too bad since testing is so numerous that counts lie way below that bound.

We plot the testing ratio (keeping in mind that kid counts are from 2020, and tests from 2010...)

```{r}
# Sort tracts by under_yo5_pplE and then plot the kid count, the nr of tests, and number of elevations by ordered tract

data %>%
  filter(!censored,
         under_yo5_pplE>tested) %>% # there are some tracts for which this is violated
  arrange(desc(under_yo5_pplE)) %>%
  mutate(BLL_geq_5 = as.integer(BLL_geq_5),
         tract_factor = as.character(TRACT),
         combined_height = under_yo5_pplE + tested + BLL_geq_5) %>%
  mutate(tract_factor = factor(tract_factor, levels = unique(tract_factor[order(combined_height, decreasing = TRUE)]))) %>%
  ggplot(aes(x = tract_factor)) +
  geom_col(aes(y = under_yo5_pplE, fill = "under_yo5_pplE"), position = "identity") +
  geom_col(aes(y = tested, fill = "tested"), position = "identity") +
  geom_col(aes(y = BLL_geq_5, fill = "BLL_geq_5"), position = "identity") +
  labs(title = "Kid count, nr of tests, and nr of elevations by tract in MA",
       x = "Tract", y = "Count") +
  theme(axis.text.x = element_blank(),
        axis.ticks.x = element_blank())



```

We can see that testing rates appear quite high.

Note that there is a subset for which CENSUS data on the offset does not agree with the test counts:

```{r}
data |> 
  filter(under_yo5_pplE<tested) |> count()
```

We will drop these observations from our stan dataset.

We also plot an overview of the number of kids living in each tract:

```{r}
# plot histogram of kids in tracts
data |> 
  ggplot(aes(x = under_yo5_pplE)) +
  geom_histogram() +
  labs(title = "Nr. of kids under 5 across tracts in MA")
```

### Preparing the data

```{r}
# drop tracts with NA in X, and remove impossible TRACTs
data <- data |>
  filter(!is.na(bp_pre_1959E_prop),
         under_yo5_pplE > tested)
```

### Modelling

#### Ignoring Censoring (dropping)

```{r}
library(broom)
# running a frequentist poisson regression for uncensored data
reg_data <- data |> 
  filter(!censored) |> 
  mutate(BLL_geq_5 = as.numeric(BLL_geq_5))

# adding the nr of kids as an exposure parameter
glm(BLL_geq_5 ~ scale(bp_pre_1959E_prop) + offset(log(under_yo5_pplE)), data = reg_data, family = "poisson") |>
  tidy() |>
  knitr::kable(digits=2)
```

#### STAN

```{r}
# get vectors to pass to stan
stan_data <- list(N_obs = data |> filter(!censored) |> count() |> pull(n),
                  N_cens = data |> filter(censored) |> count() |> pull(n),
                  y_obs = data |> filter(!censored) |> pull(BLL_geq_5) |> as.numeric(),
                  # starting simple with a single X
                  x_obs = data |> filter(!censored) |> pull(bp_pre_1959E_prop) |> scale() |> as.vector(),
                  x_cens = data |> filter(censored) |> pull(bp_pre_1959E_prop) |> scale() |> as.vector(),
                  kids_obs = data |> filter(!censored) |> pull(under_yo5_pplE),
                  kids_cens = data |> filter(censored) |> pull(under_yo5_pplE),
                  ell = 5)

```

```{r}
# import STAN model
library(cmdstanr)

regression_model_one_X <- cmdstan_model("poisson_single_X_suppression.stan")
regression_model_one_X$print()
```

```{r}
# sample 
fit <- regression_model_one_X$sample(
  data = stan_data,
  seed = 1234,
  chains = 4, 
  parallel_chains = 4,
  refresh = 500
)
```

#### Note about initalization

Before correcting some upstream data issues, in this example the STAN model would not be able to initiate sampling. Even now, it usually takes the algorithm a couple of attempts before HMC gets rolling.

If this happens, the first two things to consider is to check that your data and that it conforms to any logical constraints. The second thing is to consider scaling your predictors in order to bring the parameters closer to a range that STAN will try sampling on: by default this is in \[-2,2\].

If STAN still has difficulty to initialize, consider trying to grid search initialization values:

This auxiliary wrapper `run_init_grid` tries initialization of the sampling method for an arbitrarily fine grid of parameter values. I include this just to show how it may be used.

```{r}
source("search_initialization_grid.R") # imports run_init_grid
```

```{r}
# This will loop over the parameter grid until at least one chain finished successfully.
grid_results <- run_init_grid(stan_data = stan_data, 
              stan_model = regression_model_one_X, 
              param_grid = list(
                alpha = seq(-4.6, -4.4, 0.1), 
                beta = seq(0.4, 0.8, 0.1)))
```

### Results

```{r}
grid_results$summary(variables = c("lp__","alpha","beta")) |> 
  knitr::kable(digits=3)
```

```{r}
# plot draws from posterior for beta using bayesplot
library(bayesplot)
mcmc_areas(fit$draws(variables = "beta"))
```

## Modelling with many X's

```{r}
# drop all NA for any of the features
data <- data |> 
  filter(if_all(features, ~ !is.na(.)))
```

To run the regression with multiple X's we are changing the types of our inputs to matrices and have to modify the `model` block.

```{r}
regression_model_many_X <- cmdstan_model("poisson_many_X_suppression.stan")
regression_model_many_X$print()
```

Trying to initialize this with all of the features from our original subselection fails, so we first try with two X to see if the code runs:

```{r}
# trying two features first:
two_features <- c("bp_pre_1959E_prop", "svi_socioeconomic_pctile")
```

```{r}
# create stan data with all features
stan_data_many_X <- list(
  N_obs = data |> filter(!censored) |> count() |> pull(n),
  N_cens = data |> filter(censored) |> count() |> pull(n),
  K = length(two_features),
  y_obs = data |> filter(!censored) |> pull(BLL_geq_5) |> as.numeric(),
  # starting simple with a single X
  x_obs = data |> filter(!censored) |> select(all_of(two_features)) |> scale() |> as.matrix(),
  x_cens = data |> filter(censored) |> select(all_of(two_features)) |> scale() |> as.matrix(),
  kids_obs = data |> filter(!censored) |> pull(under_yo5_pplE),
  kids_cens = data |> filter(censored) |> pull(under_yo5_pplE),
  ell = 5
)
```

```{r}
# sample
fit <- regression_model_many_X$sample(
  data = stan_data_many_X,
  seed = 1234,
  chains = 4, 
  parallel_chains = 4,
  refresh = 500
)
```

```{r}
fit$summary() |> 
  filter(variable %in% c("alpha", "beta[1]", "beta[2]")) |> 
  knitr::kable(digits=3)
```

```{r}
# adding all of our features
stan_data_all_X <- list(
  N_obs = data |> filter(!censored) |> count() |> pull(n),
  N_cens = data |> filter(censored) |> count() |> pull(n),
  K = length(features),
  y_obs = data |> filter(!censored) |> pull(BLL_geq_5) |> as.numeric(),
  # starting simple with a single X
  x_obs = data |> filter(!censored) |> select(all_of(features)) |> scale() |> as.matrix(),
  x_cens = data |> filter(censored) |> select(all_of(features)) |> scale() |> as.matrix(),
  kids_obs = data |> filter(!censored) |> pull(under_yo5_pplE),
  kids_cens = data |> filter(censored) |> pull(under_yo5_pplE),
  ell = 5
)
```

```{r}
# sample
fit <- regression_model_many_X$sample(
  data = stan_data_all_X,
  seed = 1234,
  chains = 4, 
  parallel_chains = 4,
  refresh = 500
)
```

```{r}
fit$summary() |> 
  # rename all of the beta[j] by their feature names
  mutate(variable = ifelse(str_detect(variable, "beta"), paste0(features[as.numeric(str_extract(variable, "[0-9]+"))]), variable)) |>
  filter(variable %in% c(features, "alpha")) |> 
  knitr::kable(digits=3)
```

```{r}
draws <- fit$draws(format = "draws_df")
draws <- draws |> 
  # rename column names beta[j] by their feature names
  rename_with(~ (features[as.numeric(str_extract(., "[0-9]+"))]), starts_with("beta"))

# plot mcmc_areas for all features
mcmc_areas(draws |> select(features),
           prob = 0.8) +
  ggtitle("Posterior distributions",
          "with medians and 80% intervals")
```

```{r}
# plot posterior predictive check
# extract all y_tilde variables from fit$summary()
preds <- fit$summary() |> 
  filter(str_detect(variable, "y_tilde")) |> 
  select(median, q5, q95)
```

```{r}
# plot preds again y. for y that are missing, plot a linerange between 1 and 5:
y <- as.numeric(c(stan_data_many_X$y_obs, rep(NA, stan_data_many_X$N_cens)))

# join with preds
preds <- preds |> 
  mutate(y = y,
         observation = 1:n(),
         y_cens_range_min = ifelse(is.na(y), 1, y),
         y_cens_range_max = ifelse(is.na(y), 5, y),
         y = ifelse(is.na(y), 2.5, y)) # fill for plotting
```

```{r}
preds |>
  ggplot(aes(x = observation)) +
  geom_linerange(aes(ymin = y_cens_range_min, ymax = y_cens_range_max), color = "blue", alpha = 0.2) +
  geom_point(aes(y = y), color = "blue", alpha = 0.4) +
  geom_linerange(aes(ymin = q5, ymax = q95), color = "red", alpha = 0.2) +
  geom_point(aes(y = median), color = "red", alpha = 0.2) +
  labs(title = "Posterior predictive check",
       subtitle = "Red lines are 80% intervals, blue dots are observed BLL_geq_5",
       x = "tract", y = "BLL_geq_5")
```
